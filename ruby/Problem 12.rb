#!/usr/bin/env ruby

=begin official problem
http://projecteuler.net/index.php?section=problems&id=12

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
=end

def divisors(num)
  divs = 0
  current = 1
  max = num/2
  
  while (current < max)
    if (Float(num)/(current))%1 == 0
      divs += 2
      divs -= 1 if num/current == current # account for things like 36 == 6*6
      max = num/current
    end
    current += 1
  end
  divs
end

solution = 0
bestSoFar = 0
(1..100_000).each do |i|
  tri = 0
  i.times do |i|
    tri += i+1
  end
  tmp = divisors(tri)
  if tmp > bestSoFar
    puts "#{i}: #{tri} has #{tmp}"
    bestSoFar = tmp
  end
  if tmp > 500
    break
  end
  i += 1
end
puts solution

# V2: now uses current< max, instead of checking all divisors up to 1/2 of num.  Solves in ~2 minutes or so.
# Next step: better way of counting divisors